@inject ILoadOrderUseCase LoadOrderUseCase
@inject ILoadProductsUseCase LoadProductsUseCase

<table class="u-table-entity u-table-entity-1">
    <colgroup>
        <col width="20%">
        <col width="20%">
        <col width="20%">
        <col width="20%">
        <col width="20%">
    </colgroup>
    <thead class="u-black u-table-header u-table-header-1">
        <tr style="height: 73px;">
            <th class="u-border-1 u-border-black u-table-cell">Order Id</th>
            <th class="u-border-1 u-border-black u-table-cell">Products</th>
            <th class="u-border-1 u-border-black u-table-cell">Price</th>
            <th class="u-border-1 u-border-black u-table-cell">Date</th>
            <th class="u-border-1 u-border-black u-table-cell">Sent</th>
        </tr>
    </thead>
    <tbody class="u-table-body">
        @foreach(Order ord in this.Orders)
        {
        <tr style="height: 65px;">
            <td class="u-border-1 u-border-grey-30 u-table-cell">@ord.OrderId</td>
           <td class="u-border-1 u-border-grey-30 u-table-cell">
               <button class="btn btn-primary" @onclick="(()=>LoadProd(ord.ProductList))">Show products</button>
            </td>
            <td class="u-border-1 u-border-grey-30 u-table-cell">@ord.Price</td>
     
            <td class="u-border-1 u-border-grey-30 u-table-cell">@ord.Date</td>
            <td class="u-border-1 u-border-grey-30 u-table-cell">
                @if(!ord.done){
                   <button @onclick="()=>hide()" class="btn btn-success">Done</button>
                }
                else
                {
                        <button class="btn btn-danger">to do</button>
                }
            </td>
        </tr>
        }
    </tbody>
</table>
     
@if(this.show_products)
{
<table class="u-table-entity u-table-entity-1" id="products_list">
    <colgroup>
        <col width="25%">
        <col width="25%">
        <col width="25%">
        <col width="25%">
    </colgroup>
    <thead class="u-palette-4-base u-table-header u-table-header-1">
        <tr style="height: 29px;">
            <th class="u-border-1 u-border-palette-4-base u-table-cell">Product name</th>
            <th class="u-border-1 u-border-palette-4-base u-table-cell">Price</th>
            <th class="u-border-1 u-border-palette-4-base u-table-cell">Amount</th>
            <th class="u-border-1 u-border-palette-4-base u-table-cell">Sum</th>
            
        </tr>
    </thead>

    @if (this.listProducts != null)
    {
        <tbody class="u-table-body">
            @foreach (Products prod in this.listProducts)
            {
                <tr style="height: 48px;">
                    <td class="u-border-1 u-border-grey-30 u-first-column u-grey-5 u-table-cell u-table-cell-5">
                        @prod.ProductName
                    </td>
                    <td class="u-border-1 u-border-grey-30 u-table-cell">
                        @prod.Price.ToString("c")
                    </td>

                    <td class="u-border-1 u-border-grey-30 u-table-cell">
                         @prod.Quantity"
                    </td>
                    <td class="u-border-1 u-border-grey-30 u-table-cell">
                        @prod.Sum
                    </td>
                </tr>
            }
            <button class="btn btn-primary" @onclick="()=>hide()">Hide</button>

        </tbody>
    }
</table>
}

@code {
    List<Order>? Orders;
    public List<Products>? listProducts;
    bool show_products;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrders();
    }

    private void LoadProd(List<Products>? products)
    {
      
     //   this.Orders = orders.ToList();
        //this.ShouldRender();
       this.listProducts =  products.ToList();
       this.show_products = true;

    }
    private void hide()
    {
        this.show_products = false;
    }

    private async Task LoadOrders()
    {
        var orders = await LoadOrderUseCase.EcecuteAsync();
        this.Orders = orders.ToList();
    }
}
